---
import type { CollectionEntry } from "astro:content";

interface Props {
  article: CollectionEntry<"blog">;
}

const { data, slug } = Astro.props.article;

const sixMonthsAgo = new Date();
sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
const isRecentlyUpdated =
  data.lastUpdateDate && data.lastUpdateDate > sixMonthsAgo;
---

<a class="card" href={`/blog/${slug}`}>
  <img
    transition:name={`blog-image-${slug}`}
    src={data.img || "/assets/stock-1.jpg"}
    alt={data.img_alt || data.title}
    loading="lazy"
    decoding="async"
  />
  <div class="content">
    <h3 class="title">{data.title}</h3>
    <p class="description">{data.description}</p>
    <div class="meta">
      <div class="meta-row">
        <time datetime={data.publishDate.toISOString()}>
          {
            data.publishDate.toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </time>
        {isRecentlyUpdated && <span class="updated-badge">Updated</span>}
        {
          data.timeToRead && (
            <span class="time-to-read">â€¢ {data.timeToRead} min read</span>
          )
        }
      </div>
      {
        data.tags && data.tags.length > 0 && (
          <div class="tags">
            {data.tags.slice(0, 3).map((tag) => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        )
      }
    </div>
  </div>
</a>

<style>
  .card {
    display: flex;
    flex-direction: column;
    height: 100%;
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    text-decoration: none;
    transition: box-shadow var(--theme-transition);
  }

  .card:hover {
    box-shadow: var(--shadow-md);
  }

  img {
    width: 100%;
    height: 12rem;
    object-fit: cover;
    transition: transform 0.5s ease-in-out;
  }

  .card:hover img {
    transform: scale(1.05);
  }

  .content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    flex: 1;
  }

  .title {
    font-family: var(--font-brand);
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--gray-100);
    margin: 0;
    line-height: 1.3;
  }

  .description {
    color: var(--gray-400);
    font-size: var(--text-sm);
    line-height: 1.5;
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .meta {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-top: auto;
  }

  .meta-row {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  time {
    color: var(--gray-500);
    font-size: var(--text-xs);
    font-weight: 500;
  }

  .time-to-read {
    color: var(--gray-500);
    font-size: var(--text-xs);
    font-weight: 500;
  }

  .updated-badge {
    background: var(--badge-updated-bg);
    color: var(--badge-updated-text);
    padding: 0.25rem 0.75rem;
    border-radius: 0.75rem;
    font-size: var(--text-xs);
    font-weight: 600;
    text-transform: uppercase;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background: var(--gray-800);
    color: var(--gray-300);
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: var(--text-xs);
    font-weight: 500;
  }

  @media (min-width: 50em) {
    .card {
      border-radius: 1.5rem;
    }

    img {
      height: 16rem;
    }

    .content {
      padding: 2rem;
    }

    .title {
      font-size: var(--text-xl);
    }

    .description {
      font-size: var(--text-base);
    }
  }

  @media (width < 768px) {
    .card {
      border-radius: 0;
      border: none;
      background: var(--gray-999);
      box-shadow: none;
    }

    .card:hover {
      box-shadow: none;
    }

    img {
      height: 15rem;
      border-radius: 0.75rem;
    }

    .content {
      padding: 1rem 0;
    }
  }
</style>
