---
import { type CollectionEntry, getCollection } from "astro:content";
import ContactCTA from "../../components/ContactCTA.astro";
import Hero from "../../components/Hero.astro";
import Icon from "../../components/Icon.astro";
import Pill from "../../components/Pill.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

interface Props {
  entry: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blog = await getCollection("blog");
  return blog.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/blog/"><Icon icon="arrow-left" /> blog</a>
          <Hero title={entry.data.title} align="start">
            <div class="details">
              <div class="tags">
                {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
              </div>
              <p class="description">{entry.data.description}</p>
            </div>
          </Hero>
        </div>
      </header>
      <main class="wrapper">
        <div class="stack gap-10 content">
          {
            entry.data.img && (
              <img
                transition:name={`blog-image-${entry.slug}`}
                src={entry.data.img}
                alt={entry.data.img_alt || ""}
              />
            )
          }
          <div class="content">
            <Content />
          </div>
        </div>
      </main>
      <ContactCTA />
    </div>
  </div>

  <style>
    header {
      padding-bottom: 2.5rem;
      border-bottom: 1px solid var(--gray-800);
    }

    .back-link {
      display: none;
    }

    .details {
      display: flex;
      flex-direction: column;
      padding: 0.5rem;
      gap: 1.5rem;
      justify-content: space-between;
      align-items: center;
    }

    .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .description {
      font-size: var(--text-lg);
      max-width: 54ch;
    }

    .content {
      max-width: 65ch;
      margin-inline: auto;
    }

    /* Responsive content width for smaller screens */
    @media (max-width: 768px) {
      .content {
        max-width: 100%;
      }
    }

    @media (max-width: 480px) {
      .content {
        max-width: 100%;
      }
    }

    .content > :global(* + *) {
      margin-top: 1rem;
    }

    .content :global(h1) {
      font-size: var(--text-3xl);
      font-weight: 700;
      margin: 2rem 0 1rem 0;
      line-height: 1.2;
    }

    .content :global(h2) {
      font-size: var(--text-2xl);
      font-weight: 600;
      margin: 1.75rem 0 0.75rem 0;
      line-height: 1.3;
    }

    .content :global(h3) {
      font-size: var(--text-xl);
      font-weight: 600;
      margin: 1.5rem 0 0.5rem 0;
      line-height: 1.4;
    }

    .content :global(h4) {
      font-size: var(--text-lg);
      font-weight: 500;
      margin: 1.25rem 0 0.5rem 0;
      line-height: 1.4;
    }

    .content :global(h5) {
      font-size: var(--text-base);
      font-weight: 500;
      margin: 1rem 0 0.5rem 0;
      line-height: 1.4;
    }

    .content :global(img) {
      width: 100%;
      height: auto;
      border-radius: 1.5rem;
      box-shadow: var(--shadow-sm);
      background: var(--gradient-subtle);
      border: 1px solid var(--gray-800);
      object-fit: cover;
    }

    .content :global(blockquote) {
      font-size: var(--text-base);
      font-family: var(--font-brand);
      font-weight: 500;
      line-height: 1.4;
      padding-inline-start: 1.5rem;
      border-inline-start: 0.25rem solid var(--accent-dark);
      color: var(--gray-0);
    }

    .content :global(ul) {
      padding: 0 1.5rem;
    }

    /* Enhanced code block styling */
    .content :global(pre) {
      position: relative;
      background: var(--gray-999);
      border: 1px solid var(--gray-800);
      border-radius: 0.75rem;
      overflow: hidden;
      box-shadow: var(--shadow-sm);
      margin: 1.5rem 0;
      padding: 1.5rem;
      overflow-x: auto;
      font-family: "JetBrains Mono", "Fira Code", "Monaco", "Cascadia Code",
        "Roboto Mono", monospace;
      font-size: var(--text-sm);
      line-height: 1.6;
      color: var(--gray-200);
    }

    .content :global(pre code) {
      background: none;
      padding: 0;
      border-radius: 0;
      font-size: inherit;
      color: inherit;
      font-family: inherit;
    }

    /* Inline code styling */
    .content :global(code:not(pre code)) {
      background: var(--gray-900);
      color: var(--accent-regular);
      padding: 0.125rem 0.375rem;
      border-radius: 0.25rem;
      font-family: "JetBrains Mono", "Fira Code", "Monaco", "Cascadia Code",
        "Roboto Mono", monospace;
      font-size: 0.875em;
      font-weight: 500;
    }

    /* Syntax highlighting for common patterns */
    .content :global(pre code .keyword) {
      color: #c561f6;
      font-weight: 600;
    }

    .content :global(pre code .string) {
      color: #10b981;
    }

    .content :global(pre code .comment) {
      color: var(--gray-500);
      font-style: italic;
    }

    .content :global(pre code .function) {
      color: #3b82f6;
    }

    .content :global(pre code .number) {
      color: #f59e0b;
    }

    /* Copy button for code blocks */
    .content :global(pre::before) {
      content: "Copy";
      position: absolute;
      top: 0.75rem;
      right: 1rem;
      background: var(--gray-800);
      color: var(--gray-300);
      padding: 0.375rem 0.75rem;
      border-radius: 0.375rem;
      font-size: var(--text-xs);
      font-weight: 500;
      cursor: pointer;
      opacity: 0;
      transition: opacity var(--theme-transition);
      z-index: 1;
    }

    .content :global(pre:hover::before) {
      opacity: 1;
    }

    .content :global(pre::before:hover) {
      background: var(--gray-700);
      color: var(--gray-200);
    }

    /* Responsive code blocks */
    @media (min-width: 50em) {
      .content :global(pre) {
        border-radius: 1rem;
        padding: 2rem;
        font-size: var(--text-base);
      }

      .content :global(img) {
        border-radius: 2rem;
        max-width: 100%;
        margin: 2rem auto;
      }
    }

    @media (width < 768px) {
      .content :global(pre) {
        border-radius: 0;
        border-left: none;
        border-right: none;
        margin: 1rem 0;
        padding: 1rem;
        font-size: var(--text-sm);
      }

      .content :global(img) {
        border-radius: 0.75rem;
        margin: 1.5rem 0;
        width: 100%;
        height: auto;
      }
    }

    .back-link,
    .content :global(a) {
      text-decoration: 1px solid underline transparent;
      text-underline-offset: 0.25em;
      transition: text-decoration-color var(--theme-transition);
    }

    .back-link:hover,
    .back-link:focus,
    .content :global(a:hover),
    .content :global(a:focus) {
      text-decoration-color: currentColor;
    }

    @media (min-width: 50em) {
      .back-link {
        display: block;
        align-self: flex-start;
      }

      .details {
        flex-direction: row;
        gap: 2.5rem;
      }

      .content :global(blockquote) {
        font-size: var(--text-lg);
      }
    }
  </style>

  <script>
    // Enhanced copy to clipboard functionality for code blocks
    document.addEventListener("DOMContentLoaded", () => {
      const codeBlocks = document.querySelectorAll(".content pre");

      codeBlocks.forEach((block) => {
        // Create a proper copy button
        const copyButton = document.createElement("button");
        copyButton.className = "copy-button";
        copyButton.innerHTML = `
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
          </svg>
          <span class="copy-text">Copy</span>
        `;

        // Style the copy button
        copyButton.style.cssText = `
          position: absolute;
          top: 0.75rem;
          right: 1rem;
          display: flex;
          align-items: center;
          gap: 0.5rem;
          background: var(--gray-800);
          color: var(--gray-300);
          padding: 0.375rem 0.75rem;
          border: 1px solid var(--gray-700);
          border-radius: 0.375rem;
          font-size: var(--text-xs);
          font-weight: 500;
          cursor: pointer;
          opacity: 0;
          transition: all var(--theme-transition);
          z-index: 1;
        `;

        (block as HTMLElement).style.position = "relative";
        block.appendChild(copyButton);

        // Show button on hover
        block.addEventListener("mouseenter", () => {
          copyButton.style.opacity = "1";
        });

        block.addEventListener("mouseleave", () => {
          copyButton.style.opacity = "0";
        });

        // Copy functionality
        copyButton.addEventListener("click", async () => {
          const code = block.querySelector("code")?.textContent || "";
          const copyText = copyButton.querySelector(".copy-text");

          try {
            await navigator.clipboard.writeText(code);

            // Visual feedback
            copyButton.style.background = "var(--accent-regular)";
            copyButton.style.color = "var(--accent-text-over)";
            copyButton.style.borderColor = "var(--accent-dark)";
            copyText.textContent = "Copied!";

            setTimeout(() => {
              copyButton.style.background = "var(--gray-800)";
              copyButton.style.color = "var(--gray-300)";
              copyButton.style.borderColor = "var(--gray-700)";
              copyText.textContent = "Copy";
            }, 2000);
          } catch (err) {
            console.error("Failed to copy text: ", err);
            copyText.textContent = "Failed";
            setTimeout(() => {
              copyText.textContent = "Copy";
            }, 2000);
          }
        });
      });
    });
  </script>
</BaseLayout>
